<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:symantecrest.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" doc:name="HTTP Request Configuration"/>
    <munit:test name="get:/PRORequestFailures:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/PRORequestFailures:symantecrest-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['CassandraDB']"/>
            </mock:with-attributes>
            <mock:then-return payload="0"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/3pl_api/v1/PRORequestFailures" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="&quot;0&quot;" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequestFailures:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/PRORequestFailures:symantecrest-config-400-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['CassandraDB']"/>
            </mock:with-attributes>
            <mock:then-return payload="0">
                <mock:outbound-properties>
                    <mock:outbound-property key="http.status" value="400"/>
                </mock:outbound-properties>
            </mock:then-return>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/3pl_api/v1/PRORequestFailures" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="&quot;0&quot;" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequestFailures:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/PRORequestFailures:symantecrest-config-500-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['CassandraDB']"/>
            </mock:with-attributes>
            <mock:then-return payload="0">
                <mock:outbound-properties>
                    <mock:outbound-property key="http.status" value="500"/>
                </mock:outbound-properties>
            </mock:then-return>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/3pl_api/v1/PRORequestFailures" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="&quot;0&quot;" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequests:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/PRORequests:symantecrest-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/PRORequests" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_prorequests_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequests:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/PRORequests:symantecrest-config-400-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/PRORequests" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_400_prorequests_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequests:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/PRORequests:symantecrest-config-500-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/PRORequests" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_prorequests_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequestsLogging:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/PRORequestsLogging:symantecrest-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/PRORequestsLogging" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_prorequestslogging_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequestsLogging:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/PRORequestsLogging:symantecrest-config-400-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/PRORequestsLogging" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_400_prorequestslogging_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/PRORequestsLogging:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/PRORequestsLogging:symantecrest-config-500-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/PRORequestsLogging" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_prorequestslogging_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/RMAOrders:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/RMAOrders:symantecrest-config-200-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="INVENTORY_ORG_CODE" value="#['']" doc:name="INVENTORY_ORG_CODE" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/RMAOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="INVENTORY_ORG_CODE" value="#[flowVars['INVENTORY_ORG_CODE']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_rmaorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/RMAOrders:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/RMAOrders:symantecrest-config-400-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="INVENTORY_ORG_CODE" value="#['']" doc:name="INVENTORY_ORG_CODE" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/RMAOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="INVENTORY_ORG_CODE" value="#[flowVars['INVENTORY_ORG_CODE']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_400_rmaorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/RMAOrders:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/RMAOrders:symantecrest-config-500-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="INVENTORY_ORG_CODE" value="#['']" doc:name="INVENTORY_ORG_CODE" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/RMAOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="INVENTORY_ORG_CODE" value="#[flowVars['INVENTORY_ORG_CODE']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_rmaorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/RequestFailures:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/RequestFailures:symantecrest-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/RequestFailures" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_requestfailures_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/RequestFailures:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/RequestFailures:symantecrest-config-400-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/RequestFailures" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_400_requestfailures_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/RequestFailures:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/RequestFailures:symantecrest-config-500-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/RequestFailures" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_requestfailures_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/pickReleaseOrders:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/pickReleaseOrders:symantecrest-config-200-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="INVENTORY_ORG_CODE" value="#['']" doc:name="INVENTORY_ORG_CODE" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/pickReleaseOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="INVENTORY_ORG_CODE" value="#[flowVars['INVENTORY_ORG_CODE']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_pickreleaseorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/pickReleaseOrders:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/pickReleaseOrders:symantecrest-config-400-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="INVENTORY_ORG_CODE" value="#['']" doc:name="INVENTORY_ORG_CODE" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/pickReleaseOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="INVENTORY_ORG_CODE" value="#[flowVars['INVENTORY_ORG_CODE']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_400_pickreleaseorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/pickReleaseOrders:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/pickReleaseOrders:symantecrest-config-500-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="INVENTORY_ORG_CODE" value="#['']" doc:name="INVENTORY_ORG_CODE" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/pickReleaseOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="INVENTORY_ORG_CODE" value="#[flowVars['INVENTORY_ORG_CODE']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_pickreleaseorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/purchaseOrders:symantecrest-config-200-application/json-FlowTest" description="Verifying functionality of [get:/purchaseOrders:symantecrest-config-200-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/purchaseOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_purchaseorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/purchaseOrders:symantecrest-config-400-application/json-FlowTest" description="Verifying functionality of [get:/purchaseOrders:symantecrest-config-400-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/purchaseOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_400_purchaseorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/purchaseOrders:symantecrest-config-500-application/json-FlowTest" description="Verifying functionality of [get:/purchaseOrders:symantecrest-config-500-application/json]" ignore="true">
        <set-variable variableName="PRODUCT_GROUP" value="#['']" doc:name="PRODUCT_GROUP" />
        <set-variable variableName="SOURCE" value="#['']" doc:name="SOURCE" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/purchaseOrders" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:query-param paramName="PRODUCT_GROUP" value="#[flowVars['PRODUCT_GROUP']]" />
                <http:query-param paramName="SOURCE" value="#[flowVars['SOURCE']]" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_purchaseorders_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
</mule>
